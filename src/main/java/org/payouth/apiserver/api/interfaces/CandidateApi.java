/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.payouth.apiserver.api.interfaces;

import org.payouth.apiserver.model.Candidate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-22T17:53:20.513631+01:00[Europe/London]")
@Validated
@Tag(name = "candidate", description = "Candidate profile")
public interface CandidateApi {

    /**
     * POST /candidates : Create Candidate
     * Create a new Candidate.
     *
     * @param candidate Created Candidate object (optional)
     * @return successful operation (status code 200)
     *         or Invalid candidate supplied (status code 400)
     */
    @Operation(
        operationId = "createCandidate",
        summary = "Create Candidate",
        description = "Create a new Candidate.",
        tags = { "candidate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Candidate.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid candidate supplied")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/candidates",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Candidate> createCandidate(
        @Parameter(name = "Candidate", description = "Created Candidate object") @Valid @RequestBody(required = false) Candidate candidate
    );


    /**
     * GET /candidates/{candidateId} : Returns a specific candidate
     *
     * @param candidateId CandidateId (required)
     * @return successful operation (status code 200)
     *         or Invalid candidate supplied (status code 400)
     *         or Candidate not found (status code 404)
     */
    @Operation(
        operationId = "getCandidateById",
        summary = "Returns a specific candidate",
        tags = { "candidate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Candidate.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid candidate supplied"),
            @ApiResponse(responseCode = "404", description = "Candidate not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/candidates/{candidateId}",
        produces = { "application/json" }
    )
    ResponseEntity<Candidate> getCandidateById(
        @Parameter(name = "candidateId", description = "CandidateId", required = true, in = ParameterIn.PATH) @PathVariable("candidateId") String candidateId
    );


    /**
     * GET /candidates : Returns list of elections
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getCandidates",
        summary = "Returns list of elections",
        tags = { "candidate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Candidate.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/candidates",
        produces = { "application/json" }
    )
    ResponseEntity<List<Candidate>> getCandidates(
        
    );


    /**
     * PUT /candidates/{candidateId} : update candidate
     * update a new candidate.
     *
     * @param candidateId CandidateId (required)
     * @param candidate update candidate object (optional)
     * @return successful operation (status code 200)
     *         or Invalid candidate supplied (status code 400)
     *         or Candidate not found (status code 404)
     */
    @Operation(
        operationId = "updateCandidate",
        summary = "update candidate",
        description = "update a new candidate.",
        tags = { "candidate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Candidate.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid candidate supplied"),
            @ApiResponse(responseCode = "404", description = "Candidate not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/candidates/{candidateId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Candidate> updateCandidate(
        @Parameter(name = "candidateId", description = "CandidateId", required = true, in = ParameterIn.PATH) @PathVariable("candidateId") String candidateId,
        @Parameter(name = "Candidate", description = "update candidate object") @Valid @RequestBody(required = false) Candidate candidate
    );

}
