/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.payouth.apiserver.api.interfaces;

import org.payouth.apiserver.model.Comment;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-22T10:25:30.542949600-04:00[America/New_York]")
@Validated
@Tag(name = "comments", description = "Add/View comments")
public interface CommentsApi {

    /**
     * GET /elections/{electionId}/comments : Get all comment for Election
     *
     * @param electionId Election ID (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getAllCommentsInElection",
        summary = "Get all comment for Election",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Comment.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/elections/{electionId}/comments",
        produces = { "application/json" }
    )
    ResponseEntity<List<Comment>> getAllCommentsInElection(
        @Parameter(name = "electionId", description = "Election ID", required = true, in = ParameterIn.PATH) @PathVariable("electionId") String electionId
    );


    /**
     * GET /elections/{electionId}/stages/{stageId}/comments : Get all comment for Stage
     *
     * @param electionId Election ID (required)
     * @param stageId Election ID (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getAllCommentsInStage",
        summary = "Get all comment for Stage",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Comment.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/elections/{electionId}/stages/{stageId}/comments",
        produces = { "application/json" }
    )
    ResponseEntity<List<Comment>> getAllCommentsInStage(
        @Parameter(name = "electionId", description = "Election ID", required = true, in = ParameterIn.PATH) @PathVariable("electionId") String electionId,
        @Parameter(name = "stageId", description = "Election ID", required = true, in = ParameterIn.PATH) @PathVariable("stageId") String stageId
    );


    /**
     * POST /elections/{electionId}/comments : Add a new comment for Election
     *
     * @param electionId Election ID (required)
     * @param comment Comment to be added (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "postCommentInElection",
        summary = "Add a new comment for Election",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/elections/{electionId}/comments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Comment> postCommentInElection(
        @Parameter(name = "electionId", description = "Election ID", required = true, in = ParameterIn.PATH) @PathVariable("electionId") String electionId,
        @Parameter(name = "Comment", description = "Comment to be added") @Valid @RequestBody(required = false) Comment comment
    );


    /**
     * POST /elections/{electionId}/stages/{stageId}/comments : Add a new comment for Stage
     *
     * @param electionId Election ID (required)
     * @param stageId Election ID (required)
     * @param comment Comment to be added (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "postCommentInStage",
        summary = "Add a new comment for Stage",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/elections/{electionId}/stages/{stageId}/comments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Comment> postCommentInStage(
        @Parameter(name = "electionId", description = "Election ID", required = true, in = ParameterIn.PATH) @PathVariable("electionId") String electionId,
        @Parameter(name = "stageId", description = "Election ID", required = true, in = ParameterIn.PATH) @PathVariable("stageId") String stageId,
        @Parameter(name = "Comment", description = "Comment to be added") @Valid @RequestBody(required = false) Comment comment
    );

}
