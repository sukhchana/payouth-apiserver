---
openapi: 3.1.0
info:
  title: PA Youth Hackathon
  description: Description
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://hackathon.swagger.io/api/v3
tags:
  - name: election
    description: Election
  - name: stages
    description: Stages in the Election
  - name: comments
    description: Add/View comments
  - name: user
    description: Operations about user
  - name: candidate
    description: Candidate profile
paths:
  /elections:
    get:
      tags:
        - election
      summary: Returns list of elections
      operationId: getElections
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Election'
    post:
      tags:
        - election
      summary: Create Election
      description: Create a new Election.
      operationId: createElection
      requestBody:
        description: Created Election object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Election'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
  /elections/{electionId}:
    get:
      tags:
        - election
      summary: Returns a specific election
      operationId: getElectionById
      parameters:
        - name: electionId
          in: path
          description: Election ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
    delete:
      tags:
        - election
      summary: Delete election
      description: Delete Election
      operationId: deleteElection
      parameters:
        - name: electionId
          in: path
          description: The election that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid electionId supplied
        "404":
          description: electionId not found
  /elections/{electionId}/stages:
    get:
      tags:
        - stages
      summary: Returns Election Stages
      operationId: getElectionStages
      parameters:
        - name: electionId
          in: path
          description: Election ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ElectionStage'
    post:
      tags:
        - stages
      summary: Create Election Stage
      description: Create a new Election Stage.
      operationId: createElectionStage
      parameters:
        - name: electionId
          in: path
          description: Election ID
          required: true
          schema:
            type: string
      requestBody:
        description: Created Election object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectionStage'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionStage'
  /elections/{electionId}/stages/{stageId}:
    delete:
      tags:
        - stages
      summary: Delete election Stage
      description: Delete Election Stage
      operationId: deleteElectionStage
      parameters:
        - name: electionId
          in: path
          description: The election
          required: true
          schema:
            type: string
        - name: stageId
          in: path
          description: The stageId that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid Id supplied
        "404":
          description: Id not found
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create a new user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{email}:
    get:
      tags:
        - user
      summary: Get user by email
      description: ""
      operationId: getUserByEmail
      parameters:
        - name: email
          in: path
          description: The user that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid email supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: email
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: email
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid email supplied
        "404":
          description: User not found
  /elections/{electionId}/comments:
    post:
      tags:
        - comments
      summary: Add a new comment for Election
      operationId: postCommentInElection
      parameters:
        - name: electionId
          in: path
          description: Election ID
          required: true
          schema:
            type: string
      requestBody:
        description: Comment to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    get:
      tags:
        - comments
      summary: Get all comment for Election
      operationId: getAllCommentsInElection
      parameters:
        - name: electionId
          in: path
          description: Election ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
  /elections/{electionId}/stages/{stageId}/comments:
    post:
      tags:
        - comments
      summary: Add a new comment for Stage
      operationId: postCommentInStage
      parameters:
        - name: electionId
          in: path
          description: Election ID
          required: true
          schema:
            type: string
        - name: stageId
          in: path
          description: Election ID
          required: true
          schema:
            type: string
      requestBody:
        description: Comment to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    get:
      tags:
        - comments
      summary: Get all comment for Stage
      operationId: getAllCommentsInStage
      parameters:
        - name: electionId
          in: path
          description: Election ID
          required: true
          schema:
            type: string
        - name: stageId
          in: path
          description: Election ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
  /candidates:
    get:
      tags:
        - candidate
      summary: Returns list of elections
      operationId: getCandidates
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Candidate'
    post:
      tags:
        - candidate
      summary: Create Candidate
      description: Create a new Candidate.
      operationId: createCandidate
      requestBody:
        description: Created Candidate object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Candidate'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        "400":
          description: Invalid candidate supplied

  /candidates/{candidateId}:
    get:
      tags:
        - candidate
      summary: Returns a specific candidate
      operationId: getCandidateById
      parameters:
        - name: candidateId
          in: path
          description:  CandidateId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        "400":
          description: Invalid candidate supplied
        "404":
          description: Candidate not found
    put:
      tags:
        - candidate
      summary: update candidate
      description: update a new candidate.
      operationId: updateCandidate
      parameters:
        - name: candidateId
          in: path
          description:  CandidateId
          required: true
          schema:
            type: string
      requestBody:
        description: update candidate object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Candidate'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        "400":
          description: Invalid candidate supplied
        "404":
          description: Candidate not found
components:
  schemas:
    Location:
      type: object
      properties:
        longitude:
          type: string
        latitude:
          type: string
    User:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        gender:
          type: string
        dateOfBirth:
          type: string
          example: 01/01/1990
        race:
          type: string
        email:
          type: string
          example: john@email.com
        county:
            type: string


    Election:
      type: object
      properties:
        id:
          type: string
          example: 2023USA
        name:
          type: string
          example: 2023 USA Election
        details:
          type: string
          example: This election is to elect the president of USA 2023
        stages:
          type: array
          items:
            $ref: '#/components/schemas/ElectionStage'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    ElectionStage:
      type: object
      properties:
        id:
          type: string
          example: 1
        title:
          type: string
          examples:
            - Do you know the reason for the election?
            - Do you know what areas you want to focus the most?
            - Do you know the candidates for the election?
            - Do you know where to vote?
            - Are you registered to vote?
            - Do you know how to submit a postal vote?
            - Congrats you are ready to vote.
        elements:
          type: array
          items:
            $ref: '#/components/schemas/ElectionStageElement'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    ElectionStageElement:
      type: object
      description: Generic Stage Elements that can be associated with various stages
      properties:
        id:
          type: string
          example: 1
        title:
          type: string
          description: This will be the title for each stage elements
          examples:
            - Background
            - Healthcare
            - John Doe
        picture:
          type: string
          description: base64 encoded image
          examples:
            - TE9M
            - Uk9GTA==
        details:
          type: string
          description: Additional Description
          examples:
            - The persidential election happens every 5 years
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        frames:
          type: array
          items:
            $ref: '#/components/schemas/Frame'
    Link:
      type: object
      description: URLs with their metadata
      properties:
        id:
          type: string
          examples:
            - 1
            - 2
        label:
          type: string
          examples:
            - news
        url:
          type: string
          examples:
            - https://www.google.com
    Frame:
      type: object
      description: Frames are used for placeholder of other objects such as maps
      properties:
        id:
          type: string
          examples:
            - 1
            - 2
        label:
          type: string
          examples:
            - news
        url:
          type: string
          examples:
            - https://www.google.com
    Comment:
      type: object
      description: User comments
      properties:
        id:
          type: string
          examples:
            - 1
            - 2
        username:
          type: string
          examples:
            - AmazingVoter
            - ResponsibleVoter
        comment:
          type: string
          examples:
            - This election will bring in a true difference
            - I will vote

    PoliticalParty:
      type: string
      enum:
        - Democratic
        - Republican
        - Green
        - Constitution
        - Independent
        - Socialist
        - Communist
        - Liberal
        - Reform

    Candidate:
      type: object
      description: Candidate profile
      properties:
        id:
          type: string
          example: 1
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        picture:
          type: string
        party:
          $ref: '#/components/schemas/PoliticalParty'
        pledges:
          type: array
          items:
            type: string
          description: list  summaries of public statements made by the candidate in speeches
        policies:
          type: array
          items:
            type: string
          description: list  summaries of policies made by the candidate in speeches
        summary:
          type: string
        incumbent:
          type: boolean





